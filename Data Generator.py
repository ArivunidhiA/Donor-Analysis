# -*- coding: utf-8 -*-
"""Untitled70.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aJFzRP9-b2VZDq8AkEdiglt18JhUozDV
"""

pip install pandas numpy faker

import pandas as pd
import numpy as np
import datetime as dt
from faker import Faker
import random
import os

# Set seed for reproducibility
np.random.seed(42)
fake = Faker()
Faker.seed(42)

# Generate sample data for 3000 donors over 3 years (should produce well over 10K donation records)
num_donors = 3000
start_date = dt.datetime(2022, 1, 1)
end_date = dt.datetime(2024, 12, 31)

print("Generating donor master data...")

# Create donor master table
donor_ids = range(1, num_donors + 1)
acquisition_sources = ['Direct Mail', 'Email', 'Social Media', 'Events', 'Referral', 'Website']
donor_segments = ['One-time', 'Regular', 'Major', 'Monthly', 'Corporate']
donor_locations = ['East', 'West', 'North', 'South', 'Central']
donor_age_groups = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']

# Create more realistic donor data with names and emails
donors = pd.DataFrame({
    'DonorID': donor_ids,
    'FirstName': [fake.first_name() for _ in range(num_donors)],
    'LastName': [fake.last_name() for _ in range(num_donors)],
    'AcquisitionDate': [start_date + dt.timedelta(days=np.random.randint(0, 365))
                         for _ in range(num_donors)],
    'AcquisitionSource': [np.random.choice(acquisition_sources, p=[0.3, 0.25, 0.2, 0.15, 0.05, 0.05])
                          for _ in range(num_donors)],
    'DonorSegment': [np.random.choice(donor_segments, p=[0.4, 0.3, 0.1, 0.15, 0.05])
                     for _ in range(num_donors)],
    'Location': [np.random.choice(donor_locations) for _ in range(num_donors)],
    'AgeGroup': [np.random.choice(donor_age_groups, p=[0.05, 0.15, 0.25, 0.25, 0.2, 0.1])
                for _ in range(num_donors)]
})

# Add email addresses
donors['Email'] = donors.apply(
    lambda x: f"{x['FirstName'].lower()}.{x['LastName'].lower()}@{fake.free_email_domain()}",
    axis=1
)

print("Generating donation data...")

# Function to generate donations for a donor
def generate_donations(donor_id, acquisition_date, donor_segment):
    donations = []
    current_date = acquisition_date

    # Determine donation behavior based on segment
    if donor_segment == 'One-time':
        # Generate 1-3 one-time donations
        num_donations = np.random.randint(1, 4)
        for _ in range(num_donations):
            donation_date = current_date + dt.timedelta(days=np.random.randint(30, 365))
            if donation_date <= end_date:
                amount = np.random.lognormal(mean=4.0, sigma=0.8)  # Centers around ~$50-60
                donations.append({
                    'DonorID': donor_id,
                    'DonationDate': donation_date,
                    'Amount': round(amount, 2),
                    'Campaign': np.random.choice(['Spring Appeal', 'Summer Drive', 'Fall Fundraiser', 'Year-End', 'General'])
                })
            current_date = donation_date

    elif donor_segment == 'Regular':
        # Generate donations approximately every 4-6 months
        while current_date < end_date:
            current_date = current_date + dt.timedelta(days=np.random.randint(120, 180))
            if current_date <= end_date:
                amount = np.random.lognormal(mean=4.3, sigma=0.6)  # Centers around ~$75
                donations.append({
                    'DonorID': donor_id,
                    'DonationDate': current_date,
                    'Amount': round(amount, 2),
                    'Campaign': np.random.choice(['Spring Appeal', 'Summer Drive', 'Fall Fundraiser', 'Year-End', 'General'])
                })

    elif donor_segment == 'Major':
        # Generate 1-2 larger donations per year
        while current_date < end_date:
            current_date = current_date + dt.timedelta(days=np.random.randint(180, 365))
            if current_date <= end_date:
                amount = np.random.lognormal(mean=7.5, sigma=0.5)  # Centers around ~$1800
                donations.append({
                    'DonorID': donor_id,
                    'DonationDate': current_date,
                    'Amount': round(amount, 2),
                    'Campaign': np.random.choice(['Major Gifts', 'Gala', 'Year-End', 'Capital Campaign'])
                })

    elif donor_segment == 'Monthly':
        # Generate monthly donations
        while current_date < end_date:
            current_date = current_date + dt.timedelta(days=np.random.randint(28, 32))
            if current_date <= end_date:
                amount = np.random.lognormal(mean=3.4, sigma=0.3)  # Centers around ~$30
                donations.append({
                    'DonorID': donor_id,
                    'DonationDate': current_date,
                    'Amount': round(amount, 2),
                    'Campaign': 'Monthly Giving'
                })

    elif donor_segment == 'Corporate':
        # Generate quarterly donations
        while current_date < end_date:
            current_date = current_date + dt.timedelta(days=np.random.randint(85, 95))
            if current_date <= end_date:
                amount = np.random.lognormal(mean=6.2, sigma=0.7)  # Centers around ~$500
                donations.append({
                    'DonorID': donor_id,
                    'DonationDate': current_date,
                    'Amount': round(amount, 2),
                    'Campaign': np.random.choice(['Corporate Giving', 'Matching Gifts', 'Sponsorship'])
                })

    return donations

# Generate all donations
all_donations = []
for i, donor in donors.iterrows():
    if i % 300 == 0:
        print(f"Generating donations for donor {i+1}/{num_donors}...")

    donor_donations = generate_donations(
        donor['DonorID'],
        donor['AcquisitionDate'],
        donor['DonorSegment']
    )
    all_donations.extend(donor_donations)

donations_df = pd.DataFrame(all_donations)
donations_df['DonationDate'] = pd.to_datetime(donations_df['DonationDate'])

print(f"Generated {len(donations_df)} donation records")

# Create a campaign dataset with dates and targets
print("Generating campaign data...")

campaigns = [
    {'CampaignName': 'Spring Appeal', 'StartDate': '2022-03-01', 'EndDate': '2022-04-30', 'Target': 50000, 'Year': 2022, 'Category': 'Seasonal'},
    {'CampaignName': 'Summer Drive', 'StartDate': '2022-06-01', 'EndDate': '2022-07-31', 'Target': 40000, 'Year': 2022, 'Category': 'Seasonal'},
    {'CampaignName': 'Fall Fundraiser', 'StartDate': '2022-09-01', 'EndDate': '2022-10-31', 'Target': 45000, 'Year': 2022, 'Category': 'Seasonal'},
    {'CampaignName': 'Year-End', 'StartDate': '2022-11-15', 'EndDate': '2022-12-31', 'Target': 75000, 'Year': 2022, 'Category': 'Seasonal'},
    {'CampaignName': 'Major Gifts', 'StartDate': '2022-01-01', 'EndDate': '2022-12-31', 'Target': 200000, 'Year': 2022, 'Category': 'Annual'},
    {'CampaignName': 'Monthly Giving', 'StartDate': '2022-01-01', 'EndDate': '2022-12-31', 'Target': 120000, 'Year': 2022, 'Category': 'Recurring'},
    {'CampaignName': 'General', 'StartDate': '2022-01-01', 'EndDate': '2022-12-31', 'Target': 80000, 'Year': 2022, 'Category': 'General'},
    {'CampaignName': 'Gala', 'StartDate': '2022-05-15', 'EndDate': '2022-05-15', 'Target': 100000, 'Year': 2022, 'Category': 'Event'},
    {'CampaignName': 'Capital Campaign', 'StartDate': '2022-01-01', 'EndDate': '2022-12-31', 'Target': 500000, 'Year': 2022, 'Category': 'Special'},
    {'CampaignName': 'Corporate Giving', 'StartDate': '2022-01-01', 'EndDate': '2022-12-31', 'Target': 150000, 'Year': 2022, 'Category': 'Corporate'},
    {'CampaignName': 'Matching Gifts', 'StartDate': '2022-06-01', 'EndDate': '2022-07-31', 'Target': 80000, 'Year': 2022, 'Category': 'Corporate'},
    {'CampaignName': 'Sponsorship', 'StartDate': '2022-01-01', 'EndDate': '2022-12-31', 'Target': 120000, 'Year': 2022, 'Category': 'Corporate'},

    {'CampaignName': 'Spring Appeal', 'StartDate': '2023-03-01', 'EndDate': '2023-04-30', 'Target': 55000, 'Year': 2023, 'Category': 'Seasonal'},
    {'CampaignName': 'Summer Drive', 'StartDate': '2023-06-01', 'EndDate': '2023-07-31', 'Target': 45000, 'Year': 2023, 'Category': 'Seasonal'},
    {'CampaignName': 'Fall Fundraiser', 'StartDate': '2023-09-01', 'EndDate': '2023-10-31', 'Target': 50000, 'Year': 2023, 'Category': 'Seasonal'},
    {'CampaignName': 'Year-End', 'StartDate': '2023-11-15', 'EndDate': '2023-12-31', 'Target': 85000, 'Year': 2023, 'Category': 'Seasonal'},
    {'CampaignName': 'Re-engagement', 'StartDate': '2023-08-01', 'EndDate': '2023-09-30', 'Target': 30000, 'Year': 2023, 'Category': 'Special'},
    {'CampaignName': 'Major Gifts', 'StartDate': '2023-01-01', 'EndDate': '2023-12-31', 'Target': 220000, 'Year': 2023, 'Category': 'Annual'},
    {'CampaignName': 'Monthly Giving', 'StartDate': '2023-01-01', 'EndDate': '2023-12-31', 'Target': 140000, 'Year': 2023, 'Category': 'Recurring'},
    {'CampaignName': 'General', 'StartDate': '2023-01-01', 'EndDate': '2023-12-31', 'Target': 90000, 'Year': 2023, 'Category': 'General'},
    {'CampaignName': 'Gala', 'StartDate': '2023-05-15', 'EndDate': '2023-05-15', 'Target': 120000, 'Year': 2023, 'Category': 'Event'},
    {'CampaignName': 'Capital Campaign', 'StartDate': '2023-01-01', 'EndDate': '2023-12-31', 'Target': 550000, 'Year': 2023, 'Category': 'Special'},
    {'CampaignName': 'Corporate Giving', 'StartDate': '2023-01-01', 'EndDate': '2023-12-31', 'Target': 165000, 'Year': 2023, 'Category': 'Corporate'},
    {'CampaignName': 'Matching Gifts', 'StartDate': '2023-06-01', 'EndDate': '2023-07-31', 'Target': 90000, 'Year': 2023, 'Category': 'Corporate'},
    {'CampaignName': 'Sponsorship', 'StartDate': '2023-01-01', 'EndDate': '2023-12-31', 'Target': 130000, 'Year': 2023, 'Category': 'Corporate'},

    {'CampaignName': 'Spring Appeal', 'StartDate': '2024-03-01', 'EndDate': '2024-04-30', 'Target': 60000, 'Year': 2024, 'Category': 'Seasonal'},
    {'CampaignName': 'Summer Drive', 'StartDate': '2024-06-01', 'EndDate': '2024-07-31', 'Target': 50000, 'Year': 2024, 'Category': 'Seasonal'},
    {'CampaignName': 'Fall Fundraiser', 'StartDate': '2024-09-01', 'EndDate': '2024-10-31', 'Target': 55000, 'Year': 2024, 'Category': 'Seasonal'},
    {'CampaignName': 'Year-End', 'StartDate': '2024-11-15', 'EndDate': '2024-12-31', 'Target': 95000, 'Year': 2024, 'Category': 'Seasonal'},
    {'CampaignName': 'Re-engagement', 'StartDate': '2024-05-01', 'EndDate': '2024-06-30', 'Target': 40000, 'Year': 2024, 'Category': 'Special'},
    {'CampaignName': 'Major Gifts', 'StartDate': '2024-01-01', 'EndDate': '2024-12-31', 'Target': 240000, 'Year': 2024, 'Category': 'Annual'},
    {'CampaignName': 'Monthly Giving', 'StartDate': '2024-01-01', 'EndDate': '2024-12-31', 'Target': 160000, 'Year': 2024, 'Category': 'Recurring'},
    {'CampaignName': 'General', 'StartDate': '2024-01-01', 'EndDate': '2024-12-31', 'Target': 100000, 'Year': 2024, 'Category': 'General'},
    {'CampaignName': 'Gala', 'StartDate': '2024-05-15', 'EndDate': '2024-05-15', 'Target': 140000, 'Year': 2024, 'Category': 'Event'},
    {'CampaignName': 'Capital Campaign', 'StartDate': '2024-01-01', 'EndDate': '2024-12-31', 'Target': 600000, 'Year': 2024, 'Category': 'Special'},
    {'CampaignName': 'Corporate Giving', 'StartDate': '2024-01-01', 'EndDate': '2024-12-31', 'Target': 180000, 'Year': 2024, 'Category': 'Corporate'},
    {'CampaignName': 'Matching Gifts', 'StartDate': '2024-06-01', 'EndDate': '2024-07-31', 'Target': 100000, 'Year': 2024, 'Category': 'Corporate'},
    {'CampaignName': 'Sponsorship', 'StartDate': '2024-01-01', 'EndDate': '2024-12-31', 'Target': 140000, 'Year': 2024, 'Category': 'Corporate'}
]

campaigns_df = pd.DataFrame(campaigns)
campaigns_df['StartDate'] = pd.to_datetime(campaigns_df['StartDate'])
campaigns_df['EndDate'] = pd.to_datetime(campaigns_df['EndDate'])

# Create a retention dataset
print("Calculating monthly retention rates...")

def calculate_monthly_retention():
    retention_data = []
    months = pd.date_range(start=start_date, end=end_date, freq='MS')

    # Implement the re-engagement campaign effect starting Aug 2023
    re_engagement_effect = False
    re_engagement_date = dt.datetime(2023, 8, 1)

    for i, month_start in enumerate(months):
        if i == 0:
            continue  # Skip first month as no retention to calculate

        month_end = month_start + pd.DateOffset(months=1) - pd.DateOffset(days=1)
        prev_month_start = month_start - pd.DateOffset(months=1)
        prev_month_end = month_start - pd.DateOffset(days=1)

        # Check if we've reached the re-engagement campaign
        if month_start >= re_engagement_date:
            re_engagement_effect = True

        # Get donors active in previous month
        prev_month_donors = donations_df[
            (donations_df['DonationDate'] >= prev_month_start) &
            (donations_df['DonationDate'] <= prev_month_end)
        ]['DonorID'].unique()

        # Get donors active in current month
        current_month_donors = donations_df[
            (donations_df['DonationDate'] >= month_start) &
            (donations_df['DonationDate'] <= month_end)
        ]['DonorID'].unique()

        # Calculate retention rate
        if len(prev_month_donors) > 0:
            retained_donors = np.intersect1d(prev_month_donors, current_month_donors)
            retention_rate = len(retained_donors) / len(prev_month_donors)

            # Apply the re-engagement effect (22% increase) gradually over time
            if re_engagement_effect:
                # Calculate months since re-engagement
                months_since = (month_start.year - re_engagement_date.year) * 12 + (month_start.month - re_engagement_date.month)
                if months_since <= 6:
                    # Apply increasing effect up to 22%
                    boost_factor = (months_since / 6) * 0.22
                    retention_rate = min(retention_rate * (1 + boost_factor), 0.95)  # Cap at 95%
                else:
                    # Full effect
                    retention_rate = min(retention_rate * 1.22, 0.95)  # Cap at 95%

            retention_data.append({
                'Year': month_start.year,
                'Month': month_start.month,
                'YearMonth': month_start.strftime('%Y-%m'),
                'RetentionRate': round(retention_rate * 100, 1),
                'TotalDonors': len(prev_month_donors),
                'RetainedDonors': len(retained_donors),
                'LostDonors': len(prev_month_donors) - len(retained_donors)
            })

    return pd.DataFrame(retention_data)

retention_df = calculate_monthly_retention()

# Add segment-specific retention
print("Calculating segment-specific retention rates...")

def calculate_segment_retention():
    segment_retention = []
    months = pd.date_range(start=start_date, end=end_date, freq='MS')
    segments = donors['DonorSegment'].unique()

    # Implement the re-engagement campaign effect starting Aug 2023
    re_engagement_date = dt.datetime(2023, 8, 1)

    for segment in segments:
        segment_donors = donors[donors['DonorSegment'] == segment]['DonorID'].values

        for i, month_start in enumerate(months):
            if i == 0:
                continue  # Skip first month

            month_end = month_start + pd.DateOffset(months=1) - pd.DateOffset(days=1)
            prev_month_start = month_start - pd.DateOffset(months=1)
            prev_month_end = month_start - pd.DateOffset(days=1)

            # Check if we've reached the re-engagement campaign
            re_engagement_effect = month_start >= re_engagement_date

            # Get segment donors active in previous month
            prev_month_segment_donors = donations_df[
                (donations_df['DonationDate'] >= prev_month_start) &
                (donations_df['DonationDate'] <= prev_month_end) &
                (donations_df['DonorID'].isin(segment_donors))
            ]['DonorID'].unique()

            # Get segment donors active in current month
            current_month_segment_donors = donations_df[
                (donations_df['DonationDate'] >= month_start) &
                (donations_df['DonationDate'] <= month_end) &
                (donations_df['DonorID'].isin(segment_donors))
            ]['DonorID'].unique()

            # Calculate retention rate
            if len(prev_month_segment_donors) > 0:
                retained_segment_donors = np.intersect1d(prev_month_segment_donors, current_month_segment_donors)
                retention_rate = len(retained_segment_donors) / len(prev_month_segment_donors)

                # Apply the re-engagement effect (different effect per segment)
                if re_engagement_effect:
                    # Different segments respond differently to re-engagement
                    boost_mapping = {
                        'One-time': 0.25,     # 25% boost for one-time donors
                        'Regular': 0.22,      # 22% boost for regular donors
                        'Major': 0.15,        # 15% boost for major donors (already high retention)
                        'Monthly': 0.12,      # 12% boost for monthly donors (already high retention)
                        'Corporate': 0.18     # 18% boost for corporate donors
                    }

                    # Apply boost with a ramp-up period
                    months_since = (month_start.year - re_engagement_date.year) * 12 + (month_start.month - re_engagement_date.month)
                    if months_since <= 6:
                        # Gradual ramp-up
                        boost_factor = (months_since / 6) * boost_mapping[segment]
                        retention_rate = min(retention_rate * (1 + boost_factor), 0.98)  # Cap at 98%
                    else:
                        # Full effect
                        retention_rate = min(retention_rate * (1 + boost_mapping[segment]), 0.98)  # Cap at 98%

                segment_retention.append({
                    'Segment': segment,
                    'Year': month_start.year,
                    'Month': month_start.month,
                    'YearMonth': month_start.strftime('%Y-%m'),
                    'RetentionRate': round(retention_rate * 100, 1),
                    'TotalDonors': len(prev_month_segment_donors),
                    'RetainedDonors': len(retained_segment_donors),
                    'LostDonors': len(prev_month_segment_donors) - len(retained_segment_donors)
                })

    return pd.DataFrame(segment_retention)

segment_retention_df = calculate_segment_retention()

# Create donor lifetime value dataset
print("Calculating donor lifetime values...")

def calculate_ltv():
    # Group by donor ID and calculate their donation history
    donor_totals = donations_df.groupby('DonorID').agg(
        FirstDonation=('DonationDate', 'min'),
        LastDonation=('DonationDate', 'max'),
        TotalDonations=('Amount', 'sum'),
        DonationCount=('Amount', 'count')
    ).reset_index()

    # Calculate donor tenure in months
    donor_totals['TenureMonths'] = (
        (donor_totals['LastDonation'] - donor_totals['FirstDonation']).dt.days / 30
    ).round()

    # Set minimum tenure to 1 month
    donor_totals['TenureMonths'] = donor_totals['TenureMonths'].apply(lambda x: max(x, 1))

    # Join with donor information
    donor_ltv = donor_totals.merge(donors, on='DonorID')

    # Calculate monthly value and projected LTV
    donor_ltv['MonthlyValue'] = donor_ltv['TotalDonations'] / donor_ltv['TenureMonths']

    # Different segments have different average lifespans
    lifespan_mapping = {
        'One-time': 1,      # 1 month (effectively just their donation)
        'Regular': 24,      # 2 years average lifespan
        'Major': 36,        # 3 years
        'Monthly': 48,      # 4 years
        'Corporate': 36     # 3 years
    }

    donor_ltv['ProjectedLifespan'] = donor_ltv['DonorSegment'].map(lifespan_mapping)
    donor_ltv['LifetimeValue'] = donor_ltv['MonthlyValue'] * donor_ltv['ProjectedLifespan']

    # Add the re-engagement boost effect to donors who were part of that campaign
    re_engaged_donors = donations_df[
        donations_df['Campaign'] == 'Re-engagement'
    ]['DonorID'].unique()

    donor_ltv['WasReengaged'] = donor_ltv['DonorID'].isin(re_engaged_donors)
    donor_ltv.loc[donor_ltv['WasReengaged'], 'LifetimeValue'] *= 1.22  # 22% boost

    return donor_ltv

ltv_df = calculate_ltv()

# Create aggregated LTV by segment
print("Creating LTV by segment summary...")
ltv_by_segment = ltv_df.groupby('DonorSegment').agg(
    AvgLTV=('LifetimeValue', 'mean'),
    MedianLTV=('LifetimeValue', 'median'),
    TotalLTV=('LifetimeValue', 'sum'),
    DonorCount=('DonorID', 'count')
).reset_index()

# Create a summary of re-engagement impact
print("Creating re-engagement impact summary...")
reengagement_impact = ltv_df.groupby('WasReengaged').agg(
    AvgLTV=('LifetimeValue', 'mean'),
    MedianLTV=('LifetimeValue', 'median'),
    TotalLTV=('LifetimeValue', 'sum'),
    DonorCount=('DonorID', 'count')
).reset_index()

# Create donation frequency dataset
print("Creating donation frequency dataset...")
donation_frequency = donations_df.groupby('DonorID').agg(
    DonationCount=('DonationDate', 'count'),
    FirstDonation=('DonationDate', 'min'),
    LastDonation=('DonationDate', 'max'),
    TotalAmount=('Amount', 'sum'),
    AvgAmount=('Amount', 'mean')
).reset_index()

donation_frequency['ActiveDays'] = (donation_frequency['LastDonation'] - donation_frequency['FirstDonation']).dt.days
donation_frequency['ActiveDays'] = donation_frequency['ActiveDays'].apply(lambda x: max(x, 1))
donation_frequency['DonationsPerYear'] = donation_frequency['DonationCount'] / (donation_frequency['ActiveDays'] / 365)

# Merge with donor information
donation_frequency = donation_frequency.merge(
    donors[['DonorID', 'DonorSegment', 'AcquisitionSource', 'Location', 'AgeGroup']],
    on='DonorID'
)

# Create campaign performance dataset
print("Creating campaign performance metrics...")

campaign_performance = donations_df.groupby('Campaign').agg(
    TotalAmount=('Amount', 'sum'),
    DonationCount=('Amount', 'count'),
    UniqueDonoرs=('DonorID', 'nunique'),
    AvgDonation=('Amount', 'mean')
).reset_index()

# Merge with campaign targets
campaign_performance = campaign_performance.merge(
    campaigns_df[['CampaignName', 'Target', 'Category', 'Year']],
    left_on='Campaign',
    right_on='CampaignName',
    how='left'
)

campaign_performance['PercentOfTarget'] = (campaign_performance['TotalAmount'] / campaign_performance['Target'] * 100).round(2)
campaign_performance.loc[campaign_performance['PercentOfTarget'].isna(), 'PercentOfTarget'] = 0

# Create a donor churn dataset (the inverse of retention)
print("Creating churn prediction dataset...")

# Get all donors who made donations
active_donors = donations_df['DonorID'].unique()

# For each month, classify if a donor was active, inactive, or churned
churn_data = []
months = pd.date_range(start=start_date, end=end_date, freq='MS')

for month_start in months:
    month_end = month_start + pd.DateOffset(months=1) - pd.DateOffset(days=1)

    # Get donors who were active in this month
    active_this_month = set(donations_df[
        (donations_df['DonationDate'] >= month_start) &
        (donations_df['DonationDate'] <= month_end)
    ]['DonorID'].unique())

    # Get donors who were active in the 6 months before this month
    six_months_ago = month_start - pd.DateOffset(months=6)
    active_prior_6_months = set(donations_df[
        (donations_df['DonationDate'] >= six_months_ago) &
        (donations_df['DonationDate'] < month_start)
    ]['DonorID'].unique())

    # Classify donors for this month
    for donor_id in active_prior_6_months:
        # If they were active both periods, they're retained
        # If they were active in prior period but not this month, they may be churning
        status = 'Active' if donor_id in active_this_month else 'Inactive'

        # Get donor details
        donor_info = donors[donors['DonorID'] == donor_id].iloc[0]

        # Calculate time since last donation (potential churn predictor)
        last_donation_date = donations_df[donations_df['DonorID'] == donor_id]['DonationDate'].max()
        months_since_donation = (month_end - last_donation_date).days / 30

        # Calculate total amount and frequency (potential churn predictors)
        donor_donations = donations_df[donations_df['DonorID'] == donor_id]
        total_donated = donor_donations['Amount'].sum()
        donation_count = len(donor_donations)

        churn_data.append({
            'DonorID': donor_id,
            'YearMonth': month_start.strftime('%Y-%m'),
            'Year': month_start.year,
            'Month': month_start.month,
            'Status': status,
            'DonorSegment': donor_info['DonorSegment'],
            'AcquisitionSource': donor_info['AcquisitionSource'],
            'Location': donor_info['Location'],
            'AgeGroup': donor_info['AgeGroup'],
            'MonthsSinceLastDonation': round(months_since_donation, 1),
            'TotalDonated': total_donated,
            'DonationCount': donation_count,
            'IsChurned': status == 'Inactive' and months_since_donation > 6
        })

churn_df = pd.DataFrame(churn_data)

# Create directory to store the datasets if it doesn't exist
output_dir = 'donor_analytics_dataset'
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Save to CSV files
print("Saving all datasets to CSV files...")
donors.to_csv(f'{output_dir}/donor_master.csv', index=False)
donations_df.to_csv(f'{output_dir}/donations.csv', index=False)
campaigns_df.to_csv(f'{output_dir}/campaigns.csv', index=False)
retention_df.to_csv(f'{output_dir}/monthly_retention.csv', index=False)
segment_retention_df.to_csv(f'{output_dir}/segment_retention.csv', index=False)
ltv_df.to_csv(f'{output_dir}/donor_ltv.csv', index=False)
ltv_by_segment.to_csv(f'{output_dir}/ltv_by_segment.csv', index=False)
reengagement_impact.to_csv(f'{output_dir}/reengagement_impact.csv', index=False)
donation_frequency.to_csv(f'{output_dir}/donation_frequency.csv', index=False)
campaign_performance.to_csv(f'{output_dir}/campaign_performance.csv', index=False)
churn_df.to_csv(f'{output_dir}/donor_churn.csv', index=False)

print("Dataset generation complete!")
print(f"Generated {len(donors)} donors with {len(donations_df)} donations")
print(f"Files are saved in the '{output_dir}' directory")

# Display counts of each dataset
print("\nDataset Record Counts:")
print(f"1. donor_master.csv: {len(donors)} records")
print(f"2. donations.csv: {len(donations_df)} records")
print(f"3. campaigns.csv: {len(campaigns_df)} records")
print(f"4. monthly_retention.csv: {len(retention_df)} records")
print(f"5. segment_retention.csv: {len(segment_retention_df)} records")
print(f"6. donor_ltv.csv: {len(ltv_df)} records")
print(f"7. ltv_by_segment.csv: {len(ltv_by_segment)} records")
print(f"8. reengagement_impact.csv: {len(reengagement_impact)} records")
print(f"9. donation_frequency.csv: {len(donation_frequency)} records")
print(f"10. campaign_performance.csv: {len(campaign_performance)} records")
print(f"11. donor_churn.csv: {len(churn_df)} records")